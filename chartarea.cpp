// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chartarea.h"

// Dispatch interfaces referenced by this interface
#include "Border.h"
#include "Location.h"
#include "Interior.h"
#include "plotarea.h"
#include "bar.h"
#include "pie.h"
#include "markercollection.h"
#include "axiscollection.h"
#include "View3D.h"
#include "HiLoOpenClose.h"
#include "candle.h"
#include "polar.h"
#include "Bubble.h"


/////////////////////////////////////////////////////////////////////////////
// CChartArea properties

BOOL CChartArea::GetIsHorizontal()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CChartArea::SetIsHorizontal(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

CBorder CChartArea::GetBorder()
{
	LPDISPATCH pDispatch;
	GetProperty(0x2, VT_DISPATCH, (void*)&pDispatch);
	return CBorder(pDispatch);
}

CLocation CChartArea::GetLocation()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3, VT_DISPATCH, (void*)&pDispatch);
	return CLocation(pDispatch);
}

CInterior CChartArea::GetInterior()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CInterior(pDispatch);
}

CPlotArea CChartArea::GetPlotArea()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CPlotArea(pDispatch);
}

CBar CChartArea::GetBar()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CBar(pDispatch);
}

CPie CChartArea::GetPie()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7, VT_DISPATCH, (void*)&pDispatch);
	return CPie(pDispatch);
}

CMarkerCollection CChartArea::GetMarkers()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CMarkerCollection(pDispatch);
}

CAxisCollection CChartArea::GetAxes()
{
	LPDISPATCH pDispatch;
	GetProperty(0x9, VT_DISPATCH, (void*)&pDispatch);
	return CAxisCollection(pDispatch);
}

CView3D CChartArea::GetView3D()
{
	LPDISPATCH pDispatch;
	GetProperty(0xa, VT_DISPATCH, (void*)&pDispatch);
	return CView3D(pDispatch);
}

LPDISPATCH CChartArea::GetParent()
{
	LPDISPATCH result;
	GetProperty(0xb, VT_DISPATCH, (void*)&result);
	return result;
}

CHiLoOpenClose CChartArea::GetHiLoOpenClose()
{
	LPDISPATCH pDispatch;
	GetProperty(0xc, VT_DISPATCH, (void*)&pDispatch);
	return CHiLoOpenClose(pDispatch);
}

CCandle CChartArea::GetCandle()
{
	LPDISPATCH pDispatch;
	GetProperty(0xd, VT_DISPATCH, (void*)&pDispatch);
	return CCandle(pDispatch);
}

long CChartArea::GetAngleUnit()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CChartArea::SetAngleUnit(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

CPolar CChartArea::GetPolar()
{
	LPDISPATCH pDispatch;
	GetProperty(0xf, VT_DISPATCH, (void*)&pDispatch);
	return CPolar(pDispatch);
}

BOOL CChartArea::GetIsShowingOutlines()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CChartArea::SetIsShowingOutlines(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

CBubble CChartArea::GetBubble()
{
	LPDISPATCH pDispatch;
	GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
	return CBubble(pDispatch);
}

/////////////////////////////////////////////////////////////////////////////
// CChartArea operations
