// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chartlabel.h"

// Dispatch interfaces referenced by this interface
#include "Border.h"
#include "Interior.h"
#include "Label.h"
#include "Coord.h"
#include "DataCoord.h"
#include "DataIndex.h"
#include "Location.h"
#include "font.h"


/////////////////////////////////////////////////////////////////////////////
// CChartLabel properties

CBorder CChartLabel::GetBorder()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1, VT_DISPATCH, (void*)&pDispatch);
	return CBorder(pDispatch);
}

CInterior CChartLabel::GetInterior()
{
	LPDISPATCH pDispatch;
	GetProperty(0x2, VT_DISPATCH, (void*)&pDispatch);
	return CInterior(pDispatch);
}

CLabel CChartLabel::GetText()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3, VT_DISPATCH, (void*)&pDispatch);
	return CLabel(pDispatch);
}

CCoord CChartLabel::GetAttachCoord()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CCoord(pDispatch);
}

CDataCoord CChartLabel::GetAttachDataCoord()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CDataCoord(pDispatch);
}

CDataIndex CChartLabel::GetAttachDataIndex()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CDataIndex(pDispatch);
}

CString CChartLabel::GetName()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CChartLabel::SetName(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

BOOL CChartLabel::GetIsShowing()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CChartLabel::SetIsShowing(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CChartLabel::GetIsConnected()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CChartLabel::SetIsConnected(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CChartLabel::GetIsBatched()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CChartLabel::SetIsBatched(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

long CChartLabel::GetAttachMethod()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CChartLabel::SetAttachMethod(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CChartLabel::GetAnchor()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CChartLabel::SetAnchor(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CChartLabel::GetOffset()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CChartLabel::SetOffset(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CChartLabel::GetAdjust()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CChartLabel::SetAdjust(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

LPDISPATCH CChartLabel::GetParent()
{
	LPDISPATCH result;
	GetProperty(0xf, VT_DISPATCH, (void*)&result);
	return result;
}

CLocation CChartLabel::GetLocation()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10, VT_DISPATCH, (void*)&pDispatch);
	return CLocation(pDispatch);
}

COleFont CChartLabel::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartLabel::SetFont(LPDISPATCH propVal)
{
	SetProperty(0x11, VT_DISPATCH, propVal);
}

long CChartLabel::GetRotation()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CChartLabel::SetRotation(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CChartLabel operations
