// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chartgroup.h"

// Dispatch interfaces referenced by this interface
#include "chart2ddata.h"
#include "chartstylecollection.h"
#include "labelcollection.h"
#include "stringcollection.h"
#include "pointstylecollection.h"
#include "chart2ddatacoordresult.h"
#include "chart2dcoordresult.h"
#include "chart2ddataindexresult.h"


/////////////////////////////////////////////////////////////////////////////
// CChartGroup properties

CString CChartGroup::GetName()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

long CChartGroup::GetChartType()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CChartGroup::SetChartType(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CChartGroup::GetDrawingOrder()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CChartGroup::SetDrawingOrder(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

CChart2DData CChartGroup::GetData()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CChart2DData(pDispatch);
}

void CChartGroup::SetData(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

CChartStyleCollection CChartGroup::GetStyles()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CChartStyleCollection(pDispatch);
}

CLabelCollection CChartGroup::GetSeriesLabels()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CLabelCollection(pDispatch);
}

CLabelCollection CChartGroup::GetPointLabels()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7, VT_DISPATCH, (void*)&pDispatch);
	return CLabelCollection(pDispatch);
}

LPDISPATCH CChartGroup::GetParent()
{
	LPDISPATCH result;
	GetProperty(0x8, VT_DISPATCH, (void*)&result);
	return result;
}

CStringCollection CChartGroup::GetSeriesFields()
{
	LPDISPATCH pDispatch;
	GetProperty(0xd, VT_DISPATCH, (void*)&pDispatch);
	return CStringCollection(pDispatch);
}

void CChartGroup::SetSeriesFields(LPDISPATCH propVal)
{
	SetProperty(0xd, VT_DISPATCH, propVal);
}

CString CChartGroup::GetPointLabelsField()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CChartGroup::SetPointLabelsField(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

CString CChartGroup::GetPointValuesField()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CChartGroup::SetPointValuesField(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

BOOL CChartGroup::GetAreSeriesLabelsBound()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CChartGroup::SetAreSeriesLabelsBound(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CChartGroup::GetIsStacked()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CChartGroup::SetIsStacked(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

CPointStyleCollection CChartGroup::GetPointStyles()
{
	LPDISPATCH pDispatch;
	GetProperty(0x16, VT_DISPATCH, (void*)&pDispatch);
	return CPointStyleCollection(pDispatch);
}

CChartStyleCollection CChartGroup::GetLegendStyles()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17, VT_DISPATCH, (void*)&pDispatch);
	return CChartStyleCollection(pDispatch);
}

/////////////////////////////////////////////////////////////////////////////
// CChartGroup operations

long CChartGroup::CoordToDataCoord(long XPixel, long YPixel, double* X, double* Y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		XPixel, YPixel, X, Y);
	return result;
}

void CChartGroup::DataCoordToCoord(double X, double Y, long* XPixel, long* YPixel)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PI4 VTS_PI4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y, XPixel, YPixel);
}

long CChartGroup::CoordToDataIndex(long XPixel, long YPixel, long Focus, long* Series, long* Point, long* Distance)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		XPixel, YPixel, Focus, Series, Point, Distance);
	return result;
}

void CChartGroup::DataIndexToCoord(long Series, long Point, long* XPixel, long* YPixel)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Series, Point, XPixel, YPixel);
}

CChart2DDataCoordResult CChartGroup::CoordToDataCoordObject(long XPixel, long YPixel)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		XPixel, YPixel);
	return CChart2DDataCoordResult(pDispatch);
}

CChart2DCoordResult CChartGroup::DataCoordToCoordObject(double X, double Y)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		X, Y);
	return CChart2DCoordResult(pDispatch);
}

CChart2DDataIndexResult CChartGroup::CoordToDataIndexObject(long XPixel, long YPixel, short Focus)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		XPixel, YPixel, Focus);
	return CChart2DDataIndexResult(pDispatch);
}

CChart2DCoordResult CChartGroup::DataIndexToCoordObject(long Series, long Point)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Series, Point);
	return CChart2DCoordResult(pDispatch);
}

void CChartGroup::LoadAdoRecordset(LPDISPATCH Recordset, BOOL UseSeriesFields)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Recordset, UseSeriesFields);
}
