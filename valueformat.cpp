// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "valueformat.h"

// Dispatch interfaces referenced by this interface
#include "NumberVF.h"
#include "currencyvf.h"
#include "accountingvf.h"
#include "percentagevf.h"
#include "fractionvf.h"
#include "scientificvf.h"


/////////////////////////////////////////////////////////////////////////////
// CValueFormat properties

CNumberVF CValueFormat::GetNumber()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1, VT_DISPATCH, (void*)&pDispatch);
	return CNumberVF(pDispatch);
}

void CValueFormat::SetNumber(LPDISPATCH propVal)
{
	SetProperty(0x1, VT_DISPATCH, propVal);
}

CCurrencyVF CValueFormat::GetCurrency()
{
	LPDISPATCH pDispatch;
	GetProperty(0x2, VT_DISPATCH, (void*)&pDispatch);
	return CCurrencyVF(pDispatch);
}

void CValueFormat::SetCurrency(LPDISPATCH propVal)
{
	SetProperty(0x2, VT_DISPATCH, propVal);
}

CAccountingVF CValueFormat::GetAccounting()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3, VT_DISPATCH, (void*)&pDispatch);
	return CAccountingVF(pDispatch);
}

void CValueFormat::SetAccounting(LPDISPATCH propVal)
{
	SetProperty(0x3, VT_DISPATCH, propVal);
}

CPercentageVF CValueFormat::GetPercentage()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CPercentageVF(pDispatch);
}

void CValueFormat::SetPercentage(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

CFractionVF CValueFormat::GetFraction()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CFractionVF(pDispatch);
}

void CValueFormat::SetFraction(LPDISPATCH propVal)
{
	SetProperty(0x5, VT_DISPATCH, propVal);
}

CScientificVF CValueFormat::GetScientific()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CScientificVF(pDispatch);
}

void CValueFormat::SetScientific(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

short CValueFormat::GetCategory()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CValueFormat::SetCategory(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

CString CValueFormat::GetFormat()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CValueFormat::SetFormat(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

LPDISPATCH CValueFormat::GetParent()
{
	LPDISPATCH result;
	GetProperty(0x9, VT_DISPATCH, (void*)&result);
	return result;
}

/////////////////////////////////////////////////////////////////////////////
// CValueFormat operations
